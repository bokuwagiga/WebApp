{"ast":null,"code":"const getState = ({\n  getStore,\n  getActions,\n  setStore\n}) => {\n  return {\n    store: {\n      message: null,\n      demo: [{\n        title: \"FIRST\",\n        background: \"white\",\n        initial: \"white\"\n      }, {\n        title: \"SECOND\",\n        background: \"white\",\n        initial: \"white\"\n      }]\n    },\n    actions: {\n      // Use getActions to call a function within a fuction\n      exampleFunction: () => {\n        getActions().changeColor(0, \"green\");\n      },\n      getMessage: async () => {\n        try {\n          // fetching data from the backend\n          const resp = await fetch(process.env.BACKEND_URL + \"/api/hello\");\n          const data = await resp.json();\n          setStore({\n            message: data.message\n          });\n          // don't forget to return something, that is how the async resolves\n          return data;\n        } catch (error) {\n          console.log(\"Error loading message from backend\", error);\n        }\n      },\n      changeColor: (index, color) => {\n        //get the store\n        const store = getStore();\n\n        //we have to loop the entire demo array to look for the respective index\n        //and change its color\n        const demo = store.demo.map((elm, i) => {\n          if (i === index) elm.background = color;\n          return elm;\n        });\n\n        //reset the global store\n        setStore({\n          demo: demo\n        });\n      }\n    }\n  };\n};\nexport default getState;","map":{"version":3,"names":["getState","getStore","getActions","setStore","store","message","demo","title","background","initial","actions","exampleFunction","changeColor","getMessage","resp","fetch","process","env","BACKEND_URL","data","json","error","console","log","index","color","map","elm","i"],"sources":["G:/abroad uni/KTU/WEB/myapp/LAB3/client/src/flux.js"],"sourcesContent":["const getState = ({ getStore, getActions, setStore }) => {\n\treturn {\n\t\tstore: {\n\t\t\tmessage: null,\n\t\t\tdemo: [\n\t\t\t\t{\n\t\t\t\t\ttitle: \"FIRST\",\n\t\t\t\t\tbackground: \"white\",\n\t\t\t\t\tinitial: \"white\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttitle: \"SECOND\",\n\t\t\t\t\tbackground: \"white\",\n\t\t\t\t\tinitial: \"white\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\tactions: {\n\t\t\t// Use getActions to call a function within a fuction\n\t\t\texampleFunction: () => {\n\t\t\t\tgetActions().changeColor(0, \"green\");\n\t\t\t},\n\n\t\t\tgetMessage: async () => {\n\t\t\t\ttry{\n\t\t\t\t\t// fetching data from the backend\n\t\t\t\t\tconst resp = await fetch(process.env.BACKEND_URL + \"/api/hello\")\n\t\t\t\t\tconst data = await resp.json()\n\t\t\t\t\tsetStore({ message: data.message })\n\t\t\t\t\t// don't forget to return something, that is how the async resolves\n\t\t\t\t\treturn data;\n\t\t\t\t}catch(error){\n\t\t\t\t\tconsole.log(\"Error loading message from backend\", error)\n\t\t\t\t}\n\t\t\t},\n\t\t\tchangeColor: (index, color) => {\n\t\t\t\t//get the store\n\t\t\t\tconst store = getStore();\n\n\t\t\t\t//we have to loop the entire demo array to look for the respective index\n\t\t\t\t//and change its color\n\t\t\t\tconst demo = store.demo.map((elm, i) => {\n\t\t\t\t\tif (i === index) elm.background = color;\n\t\t\t\t\treturn elm;\n\t\t\t\t});\n\n\t\t\t\t//reset the global store\n\t\t\t\tsetStore({ demo: demo });\n\t\t\t}\n\t\t}\n\t};\n};\n\nexport default getState;\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC;AAAS,CAAC,KAAK;EACxD,OAAO;IACNC,KAAK,EAAE;MACNC,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE,CACL;QACCC,KAAK,EAAE,OAAO;QACdC,UAAU,EAAE,OAAO;QACnBC,OAAO,EAAE;MACV,CAAC,EACD;QACCF,KAAK,EAAE,QAAQ;QACfC,UAAU,EAAE,OAAO;QACnBC,OAAO,EAAE;MACV,CAAC;IAEH,CAAC;IACDC,OAAO,EAAE;MACR;MACAC,eAAe,EAAEA,CAAA,KAAM;QACtBT,UAAU,CAAC,CAAC,CAACU,WAAW,CAAC,CAAC,EAAE,OAAO,CAAC;MACrC,CAAC;MAEDC,UAAU,EAAE,MAAAA,CAAA,KAAY;QACvB,IAAG;UACF;UACA,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAACC,OAAO,CAACC,GAAG,CAACC,WAAW,GAAG,YAAY,CAAC;UAChE,MAAMC,IAAI,GAAG,MAAML,IAAI,CAACM,IAAI,CAAC,CAAC;UAC9BjB,QAAQ,CAAC;YAAEE,OAAO,EAAEc,IAAI,CAACd;UAAQ,CAAC,CAAC;UACnC;UACA,OAAOc,IAAI;QACZ,CAAC,QAAME,KAAK,EAAC;UACZC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEF,KAAK,CAAC;QACzD;MACD,CAAC;MACDT,WAAW,EAAEA,CAACY,KAAK,EAAEC,KAAK,KAAK;QAC9B;QACA,MAAMrB,KAAK,GAAGH,QAAQ,CAAC,CAAC;;QAExB;QACA;QACA,MAAMK,IAAI,GAAGF,KAAK,CAACE,IAAI,CAACoB,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;UACvC,IAAIA,CAAC,KAAKJ,KAAK,EAAEG,GAAG,CAACnB,UAAU,GAAGiB,KAAK;UACvC,OAAOE,GAAG;QACX,CAAC,CAAC;;QAEF;QACAxB,QAAQ,CAAC;UAAEG,IAAI,EAAEA;QAAK,CAAC,CAAC;MACzB;IACD;EACD,CAAC;AACF,CAAC;AAED,eAAeN,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}